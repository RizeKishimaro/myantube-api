// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model OauthUser {
  id             String          @id @default(uuid())
  email          String          @unique
  firstName      String?
  lastName       String?
  picture        String?
  provider       String
  providerId     String
  accessToken    String?
  comments       Comment[] // Relation to Comment model
  videos         Video[] // Relation to Video model
  ratings        VideoRating[] // Relation to VideoRating model
  commentRatings CommentRating[] // Inverse relation to CommentRating model
  subscribers    Subscriber[]    @relation("oauthSubscriber")
  subscriptions  Subscriber[]    @relation("oauthChannel")
}

model User {
  id             Int             @id @unique @default(autoincrement())
  name           String          @db.VarChar(255)
  password       String
  email          String          @unique @db.VarChar(255)
  picture        String?
  isActive       Boolean         @default(false)
  comments       Comment[]
  videos         Video[]
  createdAt      DateTime        @default(now())
  commentRatings CommentRating[]
  videoRatings   VideoRating[]
  subscribers    Subscriber[]    @relation("subscriber")
  subscriptions  Subscriber[]    @relation("channel")
  activationCode ActivationCode?
}

model ActivationCode {
  id        Int       @id @unique @default(autoincrement())
  code      String    @unique
  expiresAt DateTime?
  user      User      @relation(fields: [userId], references: [id])
  userId    Int       @unique
}

model Comment {
  id            Int             @id @default(autoincrement())
  content       String
  author        User?           @relation(fields: [userId], references: [id])
  oauthAuthor   OauthUser?      @relation(fields: [oauthUserId], references: [id])
  userId        Int?
  oauthUserId   String?
  createdAt     DateTime        @default(now())
  CommentRating CommentRating[]
}

model CommentRating {
  id          Int        @id @default(autoincrement())
  likes       Int
  dislikes    Int
  comment     Comment    @relation(fields: [commentId], references: [id])
  commentId   Int
  user        User?      @relation(fields: [userId], references: [id])
  oauthUser   OauthUser? @relation(fields: [oauthUserId], references: [id])
  userId      Int?
  oauthUserId String?
}

model VideoRating {
  id          Int        @id @default(autoincrement())
  likes       Int
  dislikes    Int
  video       Video      @relation(fields: [videoId], references: [id])
  videoId     Int
  user        User?      @relation(fields: [userId], references: [id])
  oauthUser   OauthUser? @relation(fields: [oauthUserId], references: [id])
  userId      Int?
  oauthUserId String?
}

model Video {
  id          Int           @id @default(autoincrement())
  title       String
  description String?
  url         String        @unique
  author      User?         @relation(fields: [userId], references: [id])
  oauthAuthor OauthUser?    @relation(fields: [oauthUserId], references: [id])
  userId      Int?
  oauthUserId String?
  createdAt   DateTime      @default(now())
  ratings     VideoRating[]
}

model Subscriber {
  id                Int        @id @default(autoincrement())
  subscriberId      Int?
  channelId         Int?
  oauthSubscriberId String?
  oauthChannelId    String?
  subscriber        User?      @relation("subscriber", fields: [subscriberId], references: [id])
  channel           User?      @relation("channel", fields: [channelId], references: [id])
  oauthSubscriber   OauthUser? @relation("oauthSubscriber", fields: [oauthSubscriberId], references: [id])
  oauthChannel      OauthUser? @relation("oauthChannel", fields: [oauthChannelId], references: [id])
}
