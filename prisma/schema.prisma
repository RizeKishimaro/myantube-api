generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model OauthUser {
  id             String          @id @default(uuid())
  email          String          @unique
  name           String?
  picture        String?
  provider       String?
  providerId     String?
  accessToken    String?         @db.VarChar(500)
  comments       Comment[]
  videos         Video[]
  ratings        VideoRating[]
  commentRatings CommentRating[]
  subscribers    Subscriber[]    @relation("oauthSubscriber")
  subscriptions  Subscriber[]    @relation("oauthChannel")
  VideoLike      VideoLike[]
  VideoDislike   VideoDislike[]
  Views          Views[]
}

model User {
  id             String          @id @default(uuid())
  name           String          @db.VarChar(255)
  password       String
  email          String          @unique @db.VarChar(255)
  picture        String?
  isActive       Boolean         @default(false)
  comments       Comment[]
  videos         Video[]
  createdAt      DateTime        @default(now())
  commentRatings CommentRating[]
  videoRatings   VideoRating[]
  subscribers    Subscriber[]    @relation("subscriber")
  subscriptions  Subscriber[]    @relation("channel")
  activationCode ActivationCode?
  VideoLike      VideoLike[]
  VideoDislike   VideoDislike[]
  joinedAt       DateTime        @default(now())
  Views          Views[]
}

model ActivationCode {
  id        Int       @id @unique @default(autoincrement())
  code      String    @unique
  expiresAt DateTime?
  user      User      @relation(fields: [userId], references: [id])
  userId    String    @unique
}

model Comment {
  id            Int             @id @default(autoincrement())
  content       String
  video         Video           @relation(fields: [videoId], references: [id], onDelete: Cascade)
  author        User?           @relation(fields: [userId], references: [id])
  oauthAuthor   OauthUser?      @relation(fields: [oauthUserId], references: [id])
  userId        String?
  oauthUserId   String?
  createdAt     DateTime        @default(now())
  CommentRating CommentRating[]
  videoId       Int
}

model CommentRating {
  id          Int        @id @default(autoincrement())
  likes       Int
  dislikes    Int
  comment     Comment    @relation(fields: [commentId], references: [id])
  commentId   Int
  user        User?      @relation(fields: [userId], references: [id])
  oauthUser   OauthUser? @relation(fields: [oauthUserId], references: [id])
  userId      String?
  oauthUserId String?
}

model VideoRating {
  id          Int        @id @default(autoincrement())
  video       Video      @relation(fields: [videoId], references: [id], onDelete: Cascade)
  videoId     Int
  userId      String?
  oauthUserId String?
  OauthUser   OauthUser? @relation(fields: [oauthUserId], references: [id])
  User        User?      @relation(fields: [userId], references: [id])
}

model VideoLike {
  id          Int        @id @default(autoincrement())
  video       Video      @relation(fields: [videoId], references: [id], onDelete: Cascade)
  videoId     Int
  user        User       @relation(fields: [userId], references: [id])
  userId      String
  oauthUser   OauthUser? @relation(fields: [oauthUserId], references: [id])
  oauthUserId String?
}

model VideoDislike {
  id          Int        @id @default(autoincrement())
  video       Video      @relation(fields: [videoId], references: [id], onDelete: Cascade)
  videoId     Int
  user        User       @relation(fields: [userId], references: [id])
  userId      String
  oauthUser   OauthUser? @relation(fields: [oauthUserId], references: [id])
  oauthUserId String?
}

model Views {
  id          Int        @id @default(autoincrement())
  video       Video      @relation(fields: [videoId], references: [id], onDelete: Cascade)
  videoId     Int
  user        User       @relation(fields: [userId], references: [id])
  userId      String
  oauthUser   OauthUser? @relation(fields: [oauthUserId], references: [id])
  oauthUserId String?
}

model Video {
  id          Int            @id @default(autoincrement())
  title       String
  description String?
  poster      String?        @db.Text // Changed to Text
  urlHd       String?        @db.Text // Changed to Text
  urlSd       String?        @db.Text // Changed to Text
  urlHdHash   String?        @unique // Add hash field
  urlSdHash   String?        @unique // Add hash field
  author      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  oauthAuthor OauthUser?     @relation(fields: [oauthUserId], references: [id], onDelete: Cascade)
  userId      String
  oauthUserId String?
  comments    Comment[]
  likes       VideoLike[]
  dislikes    VideoDislike[]
  views       Views[]
  uploadedAt  DateTime       @default(now())
  VideoRating VideoRating[]
}

model Subscriber {
  id                String     @id @default(uuid())
  subscriberId      String?
  channelId         String?
  oauthSubscriberId String?
  oauthChannelId    String?
  subscriber        User?      @relation("subscriber", fields: [subscriberId], references: [id])
  channel           User?      @relation("channel", fields: [channelId], references: [id])
  oauthSubscriber   OauthUser? @relation("oauthSubscriber", fields: [oauthSubscriberId], references: [id])
  oauthChannel      OauthUser? @relation("oauthChannel", fields: [oauthChannelId], references: [id])
}
